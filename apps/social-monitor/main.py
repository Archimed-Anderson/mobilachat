"""
Application principale du social monitor
"""
import asyncio
import logging
import signal
import sys
from datetime import datetime
from pathlib import Path

# Ajout du chemin du projet
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from .config.mastodon_config import settings
from .collectors.mastodon_collector import MastodonCollector
from .utils.api_client import api_client

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('social_monitor.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


class SocialMonitorApp:
    def __init__(self):
        self.collector = MastodonCollector()
        self.is_running = False
        self.shutdown_event = asyncio.Event()
    
    async def start(self):
        """D√©marre l'application"""
        try:
            logger.info("üöÄ D√©marrage du Social Monitor Free Mobile")
            
            # Initialisation du collecteur
            if not await self.collector.initialize():
                logger.error("‚ùå √âchec de l'initialisation du collecteur")
                return False
            
            # Test de connexion aux services
            await self._test_services()
            
            # Configuration des signaux d'arr√™t
            self._setup_signal_handlers()
            
            # D√©marrage de la surveillance
            self.is_running = True
            await self.collector.start_monitoring()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage: {e}")
            return False
    
    async def stop(self):
        """Arr√™te l'application"""
        try:
            logger.info("üõë Arr√™t du Social Monitor...")
            
            self.is_running = False
            await self.collector.stop_monitoring()
            
            logger.info("‚úÖ Social Monitor arr√™t√©")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t: {e}")
    
    async def _test_services(self):
        """Teste la connexion aux services"""
        logger.info("üîç Test des services...")
        
        # Test du collecteur Mastodon
        if not await self.collector.test_connection():
            raise Exception("Connexion Mastodon √©chou√©e")
        
        # Test des APIs
        try:
            health = await api_client.health_check()
            if health["overall"] != "healthy":
                logger.warning("‚ö†Ô∏è Certains services ne sont pas disponibles")
            else:
                logger.info("‚úÖ Tous les services sont disponibles")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier la sant√© des services: {e}")
    
    def _setup_signal_handlers(self):
        """Configure les gestionnaires de signaux"""
        def signal_handler(signum, frame):
            logger.info(f"Signal {signum} re√ßu, arr√™t en cours...")
            asyncio.create_task(self.stop())
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def get_status(self) -> dict:
        """Retourne le statut de l'application"""
        return {
            "is_running": self.is_running,
            "collector_stats": self.collector.get_stats(),
            "timestamp": datetime.now().isoformat()
        }
    
    async def run_forever(self):
        """Ex√©cute l'application en boucle"""
        try:
            while self.is_running:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("Interruption clavier d√©tect√©e")
        finally:
            await self.stop()


async def main():
    """Fonction principale"""
    app = SocialMonitorApp()
    
    try:
        # D√©marrage de l'application
        if await app.start():
            logger.info("‚úÖ Social Monitor d√©marr√© avec succ√®s")
            
            # Ex√©cution en boucle
            await app.run_forever()
        else:
            logger.error("‚ùå √âchec du d√©marrage")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
        sys.exit(1)


def run():
    """Point d'entr√©e pour l'ex√©cution"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")
        sys.exit(1)


if __name__ == "__main__":
    run()


