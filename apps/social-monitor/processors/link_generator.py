"""
GÃ©nÃ©rateur de liens de contact uniques
"""
import uuid
import hashlib
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import logging
from ..config.mastodon_config import settings

logger = logging.getLogger(__name__)


class LinkGenerator:
    def __init__(self):
        self.base_url = settings.FRONTEND_URL
        self.link_expiry_hours = 24  # Liens valides 24h
    
    def generate_contact_link(
        self, 
        mastodon_user: str, 
        post_id: str, 
        context: Dict[str, Any]
    ) -> Dict[str, Any]:
        """GÃ©nÃ¨re un lien de contact unique pour un utilisateur Mastodon"""
        try:
            # GÃ©nÃ©ration d'un token unique
            token = self._generate_unique_token(mastodon_user, post_id, context)
            
            # URL de contact avec token
            contact_url = f"{self.base_url}/?token={token}&source=mastodon"
            
            # DonnÃ©es de contexte Ã  sauvegarder
            context_data = {
                "mastodon_user": mastodon_user,
                "post_id": post_id,
                "original_content": context.get("content", ""),
                "complaint_type": context.get("complaint_type", "general"),
                "urgency": context.get("urgency", "medium"),
                "created_at": datetime.now().isoformat(),
                "expires_at": (datetime.now() + timedelta(hours=self.link_expiry_hours)).isoformat(),
                "used": False,
                "response_sent": False
            }
            
            return {
                "token": token,
                "url": contact_url,
                "context": context_data,
                "expires_in_hours": self.link_expiry_hours
            }
            
        except Exception as e:
            logger.error(f"Erreur lors de la gÃ©nÃ©ration du lien: {e}")
            return {
                "token": None,
                "url": None,
                "context": None,
                "expires_in_hours": 0
            }
    
    def _generate_unique_token(
        self, 
        mastodon_user: str, 
        post_id: str, 
        context: Dict[str, Any]
    ) -> str:
        """GÃ©nÃ¨re un token unique basÃ© sur les donnÃ©es du post"""
        # DonnÃ©es pour le hash
        data = f"{mastodon_user}:{post_id}:{datetime.now().isoformat()}:{uuid.uuid4()}"
        
        # GÃ©nÃ©ration du hash
        hash_object = hashlib.sha256(data.encode())
        token = hash_object.hexdigest()[:16]  # 16 caractÃ¨res
        
        return token
    
    def generate_response_message(
        self, 
        mastodon_user: str, 
        complaint_type: str, 
        urgency: str,
        contact_url: str
    ) -> str:
        """GÃ©nÃ¨re un message de rÃ©ponse personnalisÃ©"""
        
        # Messages de base selon le type de rÃ©clamation
        base_messages = {
            "billing": "Nous comprenons votre prÃ©occupation concernant la facturation.",
            "technical": "Nous sommes dÃ©solÃ©s pour les difficultÃ©s techniques que vous rencontrez.",
            "customer_service": "Nous nous excusons pour la qualitÃ© de notre service client.",
            "cancellation": "Nous comprenons votre souhait de rÃ©silier votre contrat.",
            "general": "Nous sommes dÃ©solÃ©s de constater votre mÃ©contentement."
        }
        
        # Messages selon l'urgence
        urgency_messages = {
            "urgent": "Votre demande est prioritaire et sera traitÃ©e en urgence.",
            "high": "Votre demande sera traitÃ©e rapidement par notre Ã©quipe.",
            "medium": "Nous allons examiner votre demande attentivement.",
            "low": "Nous allons nous pencher sur votre demande."
        }
        
        # Construction du message
        base_message = base_messages.get(complaint_type, base_messages["general"])
        urgency_message = urgency_messages.get(urgency, urgency_messages["medium"])
        
        message = f"""Bonjour @{mastodon_user},

{base_message} {urgency_message}

Pour vous aider au mieux, nous vous invitons Ã  nous contacter directement via notre support client : {contact_url}

Notre Ã©quipe se fera un plaisir de vous accompagner dans la rÃ©solution de votre problÃ¨me.

Cordialement,
L'Ã©quipe Free Mobile ğŸ†“"""
        
        return message
    
    def generate_escalation_message(
        self, 
        mastodon_user: str, 
        complaint_type: str,
        contact_url: str
    ) -> str:
        """GÃ©nÃ¨re un message d'escalade pour les cas urgents"""
        
        message = f"""Bonjour @{mastodon_user},

Nous avons pris connaissance de votre message et nous comprenons votre frustration.

Votre demande a Ã©tÃ© immÃ©diatement transmise Ã  notre Ã©quipe de supervision qui va vous contacter dans les plus brefs dÃ©lais.

En attendant, vous pouvez Ã©galement nous contacter directement : {contact_url}

Nous nous excusons sincÃ¨rement pour les dÃ©sagrÃ©ments causÃ©s.

Cordialement,
L'Ã©quipe Free Mobile ğŸ†“"""
        
        return message
    
    def generate_follow_up_message(
        self, 
        mastodon_user: str, 
        days_since_contact: int
    ) -> str:
        """GÃ©nÃ¨re un message de suivi"""
        
        if days_since_contact == 1:
            message = f"""Bonjour @{mastodon_user},

Nous espÃ©rons que notre Ã©quipe a pu vous aider hier.

Si vous avez encore des questions ou si votre problÃ¨me n'est pas rÃ©solu, n'hÃ©sitez pas Ã  nous le faire savoir.

Cordialement,
L'Ã©quipe Free Mobile ğŸ†“"""
        
        elif days_since_contact == 3:
            message = f"""Bonjour @{mastodon_user},

Nous souhaitons nous assurer que votre problÃ¨me a Ã©tÃ© rÃ©solu.

Si ce n'est pas le cas, notre Ã©quipe reste Ã  votre disposition pour vous accompagner.

Cordialement,
L'Ã©quipe Free Mobile ğŸ†“"""
        
        else:
            message = f"""Bonjour @{mastodon_user},

Nous espÃ©rons que tout va bien de votre cÃ´tÃ©.

N'hÃ©sitez pas Ã  nous contacter si vous avez besoin d'aide.

Cordialement,
L'Ã©quipe Free Mobile ğŸ†“"""
        
        return message
    
    def validate_token(self, token: str) -> bool:
        """Valide un token de contact"""
        try:
            # VÃ©rification basique du format
            if not token or len(token) != 16:
                return False
            
            # VÃ©rification que c'est un hexadÃ©cimal
            int(token, 16)
            return True
            
        except ValueError:
            return False
    
    def get_link_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques des liens gÃ©nÃ©rÃ©s"""
        # Cette mÃ©thode pourrait Ãªtre Ã©tendue pour rÃ©cupÃ©rer les stats depuis la base de donnÃ©es
        return {
            "total_links_generated": 0,
            "active_links": 0,
            "expired_links": 0,
            "used_links": 0,
            "response_rate": 0.0
        }
    
    def cleanup_expired_links(self) -> int:
        """Nettoie les liens expirÃ©s"""
        # Cette mÃ©thode pourrait Ãªtre Ã©tendue pour nettoyer la base de donnÃ©es
        return 0
    
    def get_contact_url_variants(self, base_url: str) -> Dict[str, str]:
        """Retourne diffÃ©rentes variantes d'URL de contact"""
        return {
            "main": base_url,
            "chat": f"{base_url}#chat",
            "support": f"{base_url}#support",
            "contact": f"{base_url}#contact",
            "mobile": base_url.replace("http://", "https://") if base_url.startswith("http://") else base_url
        }
    
    def generate_qr_code_data(self, contact_url: str) -> str:
        """GÃ©nÃ¨re les donnÃ©es pour un QR code (Ã  implÃ©menter avec une lib QR)"""
        # Placeholder pour la gÃ©nÃ©ration de QR code
        return f"QR_CODE_DATA_FOR:{contact_url}"
    
    def get_link_analytics(self, token: str) -> Dict[str, Any]:
        """Retourne les analytics pour un lien spÃ©cifique"""
        # Cette mÃ©thode pourrait Ãªtre Ã©tendue pour rÃ©cupÃ©rer les analytics depuis la base de donnÃ©es
        return {
            "token": token,
            "created_at": None,
            "last_accessed": None,
            "access_count": 0,
            "response_sent": False,
            "satisfaction_score": None
        }


